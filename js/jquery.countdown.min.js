var defaultOptions = {
    date: "July 30, 2023 12:00:00",
    refresh: 1000,
    offset: 0,
    onEnd: function () {
      return;
    },
    render: function (date) {
      this.el.innerHTML =
        date.years +
        " years, " +
        date.days +
        " days, " +
        this.leadingZeros(date.hours) +
        " hours, " +
        this.leadingZeros(date.min) +
        " min and " +
        this.leadingZeros(date.sec) +
        " sec";
    },
  };
  
  var Countdown = function (el, options) {
    this.el = el;
    this.options = {};
    this.interval = false;
  
    for (var i in defaultOptions) {
      if (defaultOptions.hasOwnProperty(i)) {
        this.options[i] =
          typeof options[i] !== "undefined" ? options[i] : defaultOptions[i];
        if (i === "date" && typeof this.options.date !== "object") {
          this.options.date = new Date(this.options.date);
        }
        if (typeof this.options[i] === "function") {
          this.options[i] = this.options[i].bind(this);
        }
      }
    }
  
    this.getDiffDate = function () {
      var diff = (this.options.date.getTime() - Date.now() + this.options.offset) / 1000;
  
      var dateData = {
        years: 0,
        days: 0,
        hours: 0,
        min: 0,
        sec: 0,
        millisec: 0,
      };
  
      if (diff <= 0) {
        if (this.interval) {
          this.stop();
          this.options.onEnd();
        }
        return dateData;
      }
  
      if (diff >= 365.25 * 86400) {
        dateData.years = Math.floor(diff / (365.25 * 86400));
        diff -= dateData.years * 365.25 * 86400;
      }
  
      if (diff >= 86400) {
        dateData.days = Math.floor(diff / 86400);
        diff -= dateData.days * 86400;
      }
  
      if (diff >= 3600) {
        dateData.hours = Math.floor(diff / 3600);
        diff -= dateData.hours * 3600;
      }
  
      if (diff >= 60) {
        dateData.min = Math.floor(diff / 60);
        diff -= dateData.min * 60;
      }
  
      dateData.sec = Math.round(diff);
      dateData.millisec = diff % 1 * 1000;
  
      return dateData;
    }.bind(this);
  
    this.leadingZeros = function (num, length) {
      length = length || 2;
      num = String(num);
      if (num.length > length) {
        return num;
      }
      return (Array(length + 1).join("0") + num).substr(-length);
    };
  
    this.update = function (newDate) {
      if (typeof newDate !== "object") {
        newDate = new Date(newDate);
      }
      this.options.date = newDate;
      this.render();
      return this;
    }.bind(this);
  
    this.stop = function () {
      if (this.interval) {
        clearInterval(this.interval);
        this.interval = false;
      }
      return this;
    }.bind(this);
  
    this.render = function () {
      var date = this.getDiffDate();
      this.options.render(date);
      return this;
    }.bind(this);
  
    this.start = function () {
      if (this.interval) {
        return;
      }
      this.render();
      if (this.options.refresh) {
        this.interval = setInterval(this.render, this.options.refresh);
      }
      return this;
    }.bind(this);
  
    this.updateOffset = function (offset) {
      this.options.offset = offset;
      return this;
    }.bind(this);
  
    this.start();
  };
  
  module.exports = Countdown;
  